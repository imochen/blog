<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[普通的前端小站]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="https://imochen.com/"/>
  <updated>2016-01-09T14:02:10.000Z</updated>
  <id>https://imochen.com/</id>
  
  <author>
    <name><![CDATA[墨尘/*V5*/]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[前端重构之路（组件化）]]></title>
    <link href="https://imochen.com/2016/01/09/the-path-of-the-front-end-refactoring-componentization/"/>
    <id>https://imochen.com/2016/01/09/the-path-of-the-front-end-refactoring-componentization/</id>
    <published>2016-01-09T13:58:28.000Z</published>
    <updated>2016-01-09T14:02:10.000Z</updated>
    <content type="html"><![CDATA[<p>距离<a href="/2015/12/23/the-path-of-the-front-end-refactoring-technology-selection/">前端重构之路(技术选型篇)</a>已经过去了近半个月。之前提到说</p><blockquote><p>服务端使用<strong>ThinkJS</strong>已经可以确定了，一些配套模块也都写差不多了。前端还在Vue，Novajs，还是手动实现中徘徊。</p></blockquote><p>期间对<strong>Novajs</strong>，<strong>Vuejs</strong>进行了大量的调研，也针对业务调整了相关的开发方式。最终确定了使用<strong>Vuejs</strong>来进行组件开发，也使用<em>Vuejs</em>玩出了一套可按需加载的基础组件。</p><a id="more"></a><h2 id="u8981_u89E3_u51B3_u7684_u95EE_u9898"><a href="#u8981_u89E3_u51B3_u7684_u95EE_u9898" class="headerlink" title="要解决的问题"></a>要解决的问题</h2><ul><li>组件化开发</li><li>按需且支持并行加载</li><li>数据驱动</li><li>服务端渲染</li><li><em>web component</em>使用方式</li></ul><p><strong>为什么组件化开发？</strong><br>低耦合、高复用、便开发、易维护、代码清晰、结构明确等等。结合电商活动的特质，没有理由拒绝组件化。</p><p><strong>按需且支持并行加载</strong><br>按需加载目的是为了不同组件可以随意进行组合，而无需加载多余的资源。并行加载是指可以让组件资源同时进行加载，而无需使用require等方式异步加载，在加载速度上会有些许提升。</p><p><strong>数据驱动</strong><br>组件化，明确点说是<code>UI组件</code>。既然是UI组件，必然会有一些DOM类的操作。数据驱动可以让这些操作变的简单，且考虑到业务中某些场景，数据单双向绑定的用处也是不可忽视的。</p><p><strong>服务端渲染</strong><br>这个带来的性能提高不言而喻。组件不必通过JS去解析，用户在访问页面时已经是渲染好的页面了。当然服务端渲染不仅是输出页面，类似事件绑定，数据绑定之类在渲染后要依然生效。</p><p><strong>web component使用方式</strong><br>在组件的使用上，更偏向简单化，无需做太多的操作就可以使用一个功能丰富的组件。</p><hr><p>下面这张图是最初我们对组件的期望，和大多数组件化方案一致。有些区别的是增加了颗粒组件，主要用于存储可复用代码片段，节省开发成本。最终打包为一个js和css，js中包含html(模版)。而隔离了css是为了在使用中灵活的根据文件类别进行打包合并。</p><p><img src="http://d04.res.meilishuo.net/pic/_o/56/93/62e9fa2e4715ce710f91262b951c_805_365.cj.png" alt=""></p><h2 id="u57FA_u4E8EVuejs_u7684_u57FA_u7840_u7EC4_u4EF6_u5F00_u53D1"><a href="#u57FA_u4E8EVuejs_u7684_u57FA_u7840_u7EC4_u4EF6_u5F00_u53D1" class="headerlink" title="基于Vuejs的基础组件开发"></a>基于Vuejs的基础组件开发</h2><p>最初尝试的是<em>novajs</em>，整体上没有太大的问题，在<em>scss</em>编译这块遇到了一些问题，不过作者很快解决了，让我十分感动，然后含着泪选择了<em>Vuejs</em>。（此处主要因为团队原因没有选择<em>novajs</em>，感兴趣的童鞋可以研究下<a href="http://novajs.com/" target="_blank" rel="external">http://novajs.com/</a>，轻量级web component还是很有优势的）</p><p>在官方给出的示例中，使用<em>webpack</em>+<em>vue-loader</em>开发打包，均使用的是全量打包。我们希望组件更灵活，且能根据需要去加载，这种全量打包显然是不合适的。如上篇文章中提到的，要将这种开发打包进行一定的修改，否则是无法使用的。</p><p><em>webpack</em>确实存在打包完文件大，全量不可分割的问题，但它绝对不是这么弱，否则也不可能受到开发者的青睐。所以拆分打包的问题是可以解决的。</p><p>另外，<em>Vuejs</em>是可以使用<code>Vue.component</code>方法进行组件注册，而先不去实例化，在需要用到的组件全部注册完后，再进行实例化。</p><p>这个思路明确了，来看一下，怎么注册组件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> titleTest <span class="keyword">from</span> <span class="string">'./title-test.vue'</span>;</span><br><span class="line">Vue.component(<span class="string">'title-test'</span> , titleTest );</span><br></pre></td></tr></table></figure></p><p>经<em>webpack</em>编译后，在作用域内，Vue对象是同一个。那么问题就简单了，无论我们注册多少个组件，最终都在一个Vue对象上，只需要对Vue进行实例化即可。</p><p>在<em>webpack</em>编译的时候，每个组件都会带一个Vue.js，可以使用插件将其提取出来作为公共部分。看一下<code>webpack.config.js</code>的内容。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack主要配置</span></span><br><span class="line">entry : &#123;</span><br><span class="line">	<span class="string">'components/title-test'</span> : <span class="string">'src/components/title-test/index.js'</span>,</span><br><span class="line">	<span class="string">'components/banner-test'</span> : <span class="string">'src/components/banner-test/index.js'</span></span><br><span class="line">&#125;,</span><br><span class="line">output : &#123;</span><br><span class="line">	path: <span class="string">'./build'</span>,</span><br><span class="line">	publicPath: <span class="string">'build/'</span>,</span><br><span class="line">	<span class="comment">//按entry配置生成js</span></span><br><span class="line">	filename: <span class="string">'[name]/index.js'</span></span><br><span class="line">&#125;,</span><br><span class="line">plugins : [</span><br><span class="line">	<span class="comment">//公共部分抽离，主要是Vuejs</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">'bootstrap/basic.js'</span>), </span><br><span class="line">    <span class="comment">//css抽离，一个组件一个样式</span></span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'[name]/index.css'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>这样，打包完出现了另外一个问题，我们把所有组件都注册了，但是并没有实例化，而经过打包后的<em>Vue</em>在局部作用域，我们无法访问。看来我们是需要一个启动器咯。看下启动器怎么写。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">let</span> init = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> luna = &#123;</span><br><span class="line">	start( el )&#123;</span><br><span class="line">		<span class="keyword">if</span>( init )&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">'luna已经启动，不能重复start'</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			init = <span class="literal">true</span>;</span><br><span class="line">			luna.vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">				el : el || <span class="string">'body'</span></span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.luna = luna;</span><br></pre></td></tr></table></figure></p><p>简单处理了一下，只暴漏必要的东西，启动方法和实例化对象，如果需要其他再添加。这样的话。<code>webpack.config.js</code>的entry也对应调整一下。最终经过打包后是酱紫的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── bootstrap <span class="comment">#启动器相关</span></span><br><span class="line">│   ├── basic.js <span class="comment">#包含vuejs及组件标识</span></span><br><span class="line">│   └── index.js <span class="comment">#启动器</span></span><br><span class="line">└── components <span class="comment">#组件文件夹</span></span><br><span class="line">    ├── title-test</span><br><span class="line">    │   ├── index.css</span><br><span class="line">    │   └── index.js</span><br><span class="line">    └── banner-test</span><br><span class="line">        ├── index.css</span><br><span class="line">        └── index.js</span><br></pre></td></tr></table></figure></p><p>因为Vue.js在<em>basic</em>中，所以我们要先加载basic。而启动器文件（bootstrap/index.js）我们最好还是让这个文件在组件加载后在加载，从流程上也更清晰。</p><h2 id="u4EAB_u53D7_u7EC4_u4EF6_u7684_u4E50_u8DA3"><a href="#u4EAB_u53D7_u7EC4_u4EF6_u7684_u4E50_u8DA3" class="headerlink" title="享受组件的乐趣"></a>享受组件的乐趣</h2><p>通过针对各个问题的解决。这些个组件可以在任意地方使用，而最后仅需解决的一个问题就是，根据所使用的组件进行打包，js和js打包到一起，css和css打包到一起，或者使用combo合并请求。</p><p>而且我们经过很简单的改造就能实例化多个Vue，或者跟其他模式混合使用。而且我们的基础文件仅有70k，GZip后只有20k多些了。而且使用起来简直太舒服了。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--组件样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"component??title-test.css,banner-test.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--组件标记--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">title-test</span> <span class="attribute">:data</span>=<span class="value">""</span>&gt;</span><span class="tag">&lt;/<span class="title">title-test</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">banner-test</span> <span class="attribute">:data</span>=<span class="value">""</span>&gt;</span><span class="tag">&lt;/<span class="title">banner-test</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--基础文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"bootstrap/basic.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--组件JS--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">sript</span> <span class="attribute">src</span>=<span class="value">"component??title-test.js,banner-test.js"</span>&gt;</span><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="handlebars"><span class="xml"> </span><br><span class="line"><span class="comment">&lt;!--启动器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"bootstrap/index.js"</span>&gt;</span><span class="undefined"></span></span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line">	<span class="comment">//手动发射</span></span><br><span class="line">	luna.start();</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>当然，仅仅是这样还是不够的，一个团队，怎么去协作开发？怎么保证统一规范？怎么最大化节省开发成本？怎么能最快速度上手？都是要考虑的问题，篇幅有限，这里先不介绍由本文衍生出的开发工具了，不过已经放了一个预览版到Github和NPM了，感兴趣的可以去看下，以后再单独对这个工具进行介绍吧。</p>]]></content>
    <summary type="html">
    <![CDATA[<p>距离<a href="/2015/12/23/the-path-of-the-front-end-refactoring-technology-selection/">前端重构之路(技术选型篇)</a>已经过去了近半个月。之前提到说</p><blockquote><p>服务端使用<strong>ThinkJS</strong>已经可以确定了，一些配套模块也都写差不多了。前端还在Vue，Novajs，还是手动实现中徘徊。</p></blockquote><p>期间对<strong>Novajs</strong>，<strong>Vuejs</strong>进行了大量的调研，也针对业务调整了相关的开发方式。最终确定了使用<strong>Vuejs</strong>来进行组件开发，也使用<em>Vuejs</em>玩出了一套可按需加载的基础组件。</p>]]>
    
    </summary>
    
      <category term="Vuejs" scheme="https://imochen.com/tags/Vuejs/"/>
    
      <category term="前端重构" scheme="https://imochen.com/tags/%E5%89%8D%E7%AB%AF%E9%87%8D%E6%9E%84/"/>
    
      <category term="组件化" scheme="https://imochen.com/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端重构之路(技术选型篇)]]></title>
    <link href="https://imochen.com/2015/12/23/the-path-of-the-front-end-refactoring-technology-selection/"/>
    <id>https://imochen.com/2015/12/23/the-path-of-the-front-end-refactoring-technology-selection/</id>
    <published>2015-12-23T09:48:54.000Z</published>
    <updated>2016-01-07T06:20:10.000Z</updated>
    <content type="html"><![CDATA[<p>多年以后，你再也不是那个切图仔，而前端也不再是简单的拼页面。从最初我们高举规范化大旗，什么语意化命名，统一规范。到今天，我们对工程化的信仰。每个前端团队也都在为自己的业务不断探索，追求更加完善的工程化解决方案。</p><blockquote><p>注：以下文中提到的技术方案每个点均可长篇大论，这里仅做概述。日后根据重构进度逐步更新。</p></blockquote><a id="more"></a><h2 id="u4E1A_u52A1_u80CC_u666F"><a href="#u4E1A_u52A1_u80CC_u666F" class="headerlink" title="业务背景"></a>业务背景</h2><p>HIGO前端团队组建稍晚一些，在前端业务层继承了服务端开发带来的著名的PHP框架YII。主要用于微信签名，静态资源上CDN，还有一些简单的服务端逻辑处理。</p><p>纯前端方面，并没有特别框架。大部分业务依赖Zepto，使用RequireJS来处理依赖。整个业务依赖YII发布，但其实大多只是用到了view层而已。</p><p>在很长一段时间里，这个方案并没有特别大的问题。随着前端开发人员的不断加入，以及业务复杂度的逐步增长，基于YII+RequireJS的这种整体方案也逐步暴漏出很多缺陷。</p><ul><li>YII并没有发挥其真正的作用。</li><li>由于业务复杂度不断增长，代码维护变得很困难。</li><li>单纯的RequireJS没有完善的工程化。</li><li>PHP是有成本的，不是所有的前端都熟悉PHP。</li></ul><h2 id="u91CD_u6784_u5951_u673A"><a href="#u91CD_u6784_u5951_u673A" class="headerlink" title="重构契机"></a>重构契机</h2><p>电商的重头是活动，在之前的活动中，每月的大促活动都需要我们前端去手动开发，这显然是有问题的。</p><p>为了改变这种现状，我们先是开发了一批组件，运营人员可以根据需要选择组件来创建一个活动页面。</p><p>很快，我们便发现了新的问题。运营会配上百个组件，因为我们的YII没有完全发挥作用，所以，在组件渲染上，我们只有拿到了数据（异步接口取数据），才能知道哪些组件会被用到，进而去加载组件。带来的结果是，加载异常缓慢。</p><p>当然这里还有一些其他问题，组件的逻辑太重，服务端不能按照前端要求的格式给数据（不必深究，给不了就是给不了，哈哈）。我们只能在前端先去判断，再进行渲染。</p><p>虽然经历了多次<strong>由于历史原因，因为时间问题</strong>，但是考虑到一个长期健康的发展，重构势在必行！！！</p><h2 id="u9488_u5BF9_u4E1A_u52A1_u9009_u6280_u672F"><a href="#u9488_u5BF9_u4E1A_u52A1_u9009_u6280_u672F" class="headerlink" title="针对业务选技术"></a>针对业务选技术</h2><blockquote><p>改变必然是痛苦的，只有改变才能成长，所以成长也是痛苦的！</p></blockquote><h3 id="u670D_u52A1_u7AEF"><a href="#u670D_u52A1_u7AEF" class="headerlink" title="服务端"></a>服务端</h3><p>结合种种原因，YII这一层是不能放弃的，当然YII是要放弃的。那这就没得考虑了，NodeJS当仁不让啊。那我们先看一下要解决的问题。</p><ul><li>充当Logic层，处理服务端数据。</li><li>微信签名等强依赖服务端需求。</li><li>页面前置渲染，静态化等。</li><li>承担高并发（优于YII）。</li><li>必要的缓存机制。</li><li>其他服务端干的活。</li></ul><p>NodeJS社区欣欣向荣，各种框架眼花缭乱。著名的有<strong>Express</strong>，<strong>Koa</strong>，还有数不清的非著名框架。</p><p>在尝试了具有代表性的几个框架之后发现，结合业务，这些框架似乎都没那么完美。不完美是什么意思呢？以<strong>Express</strong>为例，我需求很多加工才能将其使用到业务中。而且存在一个模块的风险，使用的第三方模块越多，风险就越大。本着稳定为主的目的，暂且先pass掉<strong>Express</strong>。</p><p>这里要提到一个国产著名NodeJS框架 <a href="https://thinkjs.org/" target="_blank" rel="external">ThinkJS</a>。这个框架从1.x的时候就曾有过接触，上手简单，功能强大，稳定性好。目前已经是2.x版本，不仅继承了1.x各种优势，而且支持直接使用ES6/ES7来开发，对于前端来讲，这无疑是一大诱惑。当然选择一个框架，最最重要的是功能，性能，稳定性。<strong>ThinkJS</strong>在以上几点均有优秀的表现。经过调研及动手实践，<strong>ThinkJS</strong>在我们业务基础上有出色的表现。</p><p>这里还要提到另外一个原因：博主有幸曾和ThinkJS作者共事，售后服务五星好评。当然对所有用户来讲，作者都是一视同仁的。感兴趣的也可以加入<strong>ThinkJS官方交流群(339337680)</strong>。</p><h3 id="u524D_u7AEF"><a href="#u524D_u7AEF" class="headerlink" title="前端"></a>前端</h3><p>前端方面，这次重构主要服务业务是<strong>组件建站</strong>。那首先要从组件入手了。如果说服务端框架的选择经历了一番择决。前端框架/库的选择简直日了dog了，先列一下吧。</p><ul><li>React</li><li>AngularJS</li><li>Polymer</li><li>vue</li><li>backbone</li><li>novajs(Polymer mini)</li></ul><p>先不要奇怪列举了这么多相关不相关的，简单过一下。暂且忽略各个库/框架的大小，先从功能看。</p><h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><p>单向数据流，优秀的dom diff算法，可惜这些我们都用不到，pass。</p><h4 id="AngularJS"><a href="#AngularJS" class="headerlink" title="AngularJS"></a>AngularJS</h4><p>SPA(单页应用)中的王者，我们不是单页应用，pass。</p><h4 id="Polymer"><a href="#Polymer" class="headerlink" title="Polymer"></a>Polymer</h4><p>Google出品，代表组件化未来的 web component。这差不多就是我们需要的了，可惜兼容性不怎么好。</p><h4 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h4><p>vue提供的组件正是我们所需要的，可是其他功能又多余了。而且有一个问题，vue似乎没有考虑过组件动态加载，开发模式中全量打包让我接受不了，如果选择vue，意味着，我需要自己再给他配一套独特的编译系统。然后再增加一个动态打包。暂且搁置一下，没有其他方案的话再回头看。</p><h4 id="Backbone"><a href="#Backbone" class="headerlink" title="Backbone"></a>Backbone</h4><p>backbone不做评价了。这都是MVC类型的，本不该进入候选，你懂的。</p><h4 id="Novajs"><a href="#Novajs" class="headerlink" title="Novajs"></a>Novajs</h4><p>小巧的web component框架，奇舞团女神<a href="https://github.com/melonHuang/" target="_blank" rel="external">瓜瓜</a>出品。novajs只做了一件事，就是web component。当然提供的一些双向绑定之类的功能，暂时可能用不到了。不过没关系，核心功能有90%以上是有用的。当然novajs也不是没有缺点。开发和部署差异太大，官方没有提供一套完善的开发部署流程方案。不过这个不重要了。配合我们业务可以自己完善，相比vue，这个成本低很多。</p><h2 id="u5199_u5728_u6700_u540E"><a href="#u5199_u5728_u6700_u540E" class="headerlink" title="写在最后"></a>写在最后</h2><p>目前为止，服务端使用<strong>ThinkJS</strong>已经可以确定了，一些配套模块也都写差不多了。前端还在<strong>Vue</strong>，<strong>Novajs</strong>，还是手动实现中徘徊。因为<strong>组件建站</strong>是一个相对独立的业务，可以单独考虑其前端框架，但重构是一个全量的迭代，多考虑一些总没有坏处。</p><p>技术选型，除了上述提到的客观因素，还要考虑团队情况。学习成本，上手速度都是很必要的因素，这里就不展开说了。重构进行时…</p>]]></content>
    <summary type="html">
    <![CDATA[<p>多年以后，你再也不是那个切图仔，而前端也不再是简单的拼页面。从最初我们高举规范化大旗，什么语意化命名，统一规范。到今天，我们对工程化的信仰。每个前端团队也都在为自己的业务不断探索，追求更加完善的工程化解决方案。</p><blockquote><p>注：以下文中提到的技术方案每个点均可长篇大论，这里仅做概述。日后根据重构进度逐步更新。</p></blockquote>]]>
    
    </summary>
    
      <category term="ThinkJS" scheme="https://imochen.com/tags/ThinkJS/"/>
    
      <category term="WebComponent" scheme="https://imochen.com/tags/WebComponent/"/>
    
      <category term="前端重构" scheme="https://imochen.com/tags/%E5%89%8D%E7%AB%AF%E9%87%8D%E6%9E%84/"/>
    
  </entry>
  
</feed>
